{
    type : "Composite",
    "name" : "short-term-pollution-risk-prediction",
    "required" : [ 
         "site",
         "datetime",
         "prediction",
         "prediction_text_en"
#         "Prediction_text_cy"
         ],
    "bind" : [
        {
            "$source_base"  : "http://environment.data.gov.uk/sources/bwq",
            "$data_base"    : "http://environment.data.gov.uk/data/bathing-water-quality",
            "$body_slug"    : "eaew",
            "$def_bw"  : "http://environment.data.gov.uk/def/bathing-water",
            "$def_sp"  : "http://location.data.gov.uk/def/ef/SamplingPoint",
            "$def_stp" : "http://environment.data.gov.uk/def/bwq-stp",
            "$id_bw"   : "http://environment.data.gov.uk/id/bathing-water",
            "$so_sp"   : "http://location.data.gov.uk/so/ef/SamplingPoint/bwsp.eaew",
            "$so_env"  : "http://location.data.gov.uk/so/common/Envelope/bwpf.eaew",
            "$so_zoi"  : "http://location.data.gov.uk/so/ef/ZoneOfInfluence/bwzoi.eaew",
            "$bwspid"  : "{site.format('%05d')}",
            "$pubDateTime" : "{$exectime.asDate('xsd:dateTime')}",

            "$predictionDateTime" : "{datetime.replaceAll('([+-])([0-9]:?[0-9])([0-9][0-9])$','').asDate('xsd:dateTime')}",
# @@ TODO add 23:59:59 to get an expiry date time.
            "$expiresDateTime"    : "{$predictionDateTime}"
        }, 
        {
############################################################################################################            
# The following expression is a monster because I couldn't get format('%1tY%1tM%1td-%1tH%1tm%1ts') to work.
############################################################################################################
            "$pubDateTimeSlug" : 
                 "{$pubDateTime.year.format('%04d')}{$pubDateTime.month.format('%02d')}{$pubDateTime.day.format('%02d')}-{$pubDateTime.hour.format('%02d')}{$pubDateTime.minute.format('%02d')}{$pubDateTime.fullSecond.format('%02d')}",
            "$stpDataset"      : "{$data_base}/stp-risk-prediction",
            "$bodyStpDataset"  : "{$data_base}/{$body_slug}/stp-risk-prediction"
        },{
            "$incrementalStpDataset" : "{$bodyStpDataset}/dataset-increment/{$pubDateTimeSlug}",
        }
    ],
############################################################################################################
# Temporary Map source for mapping sampling-point codes to bathing water URI
############################################################################################################
    "sources" : [
       { "name" : "sp-to-bw",
         "sourceType" : "RDF",
         "source" : "sites.ttl",
         "key"  : "<skos:notation>",
         "value": "<def-bw:bathingWater>",
         "type" : "<def-sp:SamplingPoint>",
         "makeURI" : true
       }
    ],
 ##########################################################################################################
 # @@ TODO oneOffs
 ##########################################################################################################
    "templates" : [ "stp" ] ,
    "referenced" : [
       { "name" : "stp",
         "@id"  : "<{$stpDataset}/point/{$bwspid}/dateTime/{$pubDateTimeSlug}>",
         "<rdfs:type>"            : "<{$def_stp}/RiskPrediction>",
         "<def-stp:predictedAt>"  : "{$predictionDateTime}",
 # There may be a better way to extract date from dateTime, but a simple .asDate('xsd:date') doesn't do it
         "<def-stp:predictedOn>"  : "{$predictionDateTime.year.format('%04d').append('-').append($predictionDateTime.month.format('%02d')).append('-').append($predictionDateTime.day.format('%02d')).asDate('YYYY-MM-dd','xsd:date')}",
         "<def-stp:expiresAt>"    : "{$expiresDateTime}",
         "<def-stp:riskLevel>"    : "<{prediction.value == 0 ? $def_stp.append('/unknown') :
                                       prediction.value == 1 ? $def_stp.append('/normal')  :
                                       prediction.value == 2 ? $def_stp.append('/increased') : null}>",
         "<def-stp:samplingPoint>": "<{$so_sp}/{$bwspid}>",
         "<def-stp:bathingWater>" : "<{$bwspid.map('sp-to-bw')}",
         "<rdfs:comment>"         : [ "{prediction_text_en.lang('en')}", "{prediction_text_cy.lang('cy')}" ],
         "<dct:source>"           : "<{$source_base}/{$body_slug}/input/{$filename}#line={value($row.number).format('%04d')}>",
         "<qb:dataSet>"           : [ "<{$stpDataset}>", "<{$bodyStpDataset}>" ]
       }
   ]
}